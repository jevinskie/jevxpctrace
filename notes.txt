


Idea:
Frida xpc enumeration tweak

Objective: find xpc endpoints accessible from App Store container

Method:
Use existing apps on JBen phone

Inject into all apple processes a hook for processing incoming xpc call or maybe just the connection callback

Check if the caller is our or any container.sb process

If so set a flag for frida trace
New flag to only print traces if xpc handler is in callstack (tls flag? Pthread set specific or context?)

Exporting stack trace from calling process…

Idea: hook to pause calling process while sending message

In xpc handler hook in daemons, use coresymbolication on client, or call method exported by raw mach? to get call stack as collected by caller hook

Push call stack to… the stack (!!!) in the client process on the hook to be retrieved by thread get state and vm read from service hook




asm(".linker_option \"-lFoundation\"");

asm(".linker_option \"-Wl,-U,_OBJC_CLASS_$_NSXPCDecoder\"");

^ weak class that gets fixed up by ctor to point to non-exported real class using coresymbolication


clang-format -i $(fd '\.(h|m|mm|cpp|hpp)$' | ag -v 'frida-gum\.h$')



(lldb) bt
* thread #2, queue = 'com.apple.NSXPCConnection.user.anonymous.52675', stop reason = breakpoint 1.1
  * frame #0: 0x0000000100aebb50 jevxpctrace-test-service`-[jevxpctrace_test_service upperCaseString:withReply:](self=0x0000600002b30030, _cmd="upperCaseString:withReply:", aString=@"hello", reply=0x000000019996fdf0) at jevxpctrace_test_service.m:15:5
    frame #1: 0x00000001996e54a0 Foundation`__NSXPCCONNECTION_IS_CALLING_OUT_TO_EXPORTED_OBJECT_S2__ + 16
    frame #2: 0x00000001996e4448 Foundation`-[NSXPCConnection _decodeAndInvokeMessageWithEvent:flags:] + 1804
    frame #3: 0x0000000199698d10 Foundation`message_handler + 228
    frame #4: 0x000000019848c1d8 libxpc.dylib`_xpc_connection_call_event_handler + 176
    frame #5: 0x000000019848abf8 libxpc.dylib`_xpc_connection_mach_event + 1368
    frame #6: 0x0000000101061de4 libdispatch.dylib`_dispatch_client_callout4 + 20
    frame #7: 0x00000001010859f0 libdispatch.dylib`_dispatch_mach_msg_invoke + 532
    frame #8: 0x000000010106afa8 libdispatch.dylib`_dispatch_lane_serial_drain + 376
    frame #9: 0x000000010108718c libdispatch.dylib`_dispatch_mach_invoke + 508
    frame #10: 0x000000010106afa8 libdispatch.dylib`_dispatch_lane_serial_drain + 376
    frame #11: 0x000000010106c2b4 libdispatch.dylib`_dispatch_lane_invoke + 492
    frame #12: 0x000000010107bb40 libdispatch.dylib`_dispatch_workloop_worker_thread + 1240
    frame #13: 0x0000000100c08104 libsystem_pthread.dylib`_pthread_wqthread + 288
Printing description of $x19:
<OS_xpc_connection: connection[0x11f704080]: { refcnt = 2, xrefcnt = 5, name = vin.je.jevxpctrace-test-service.peer.0x11f704080, type = peer, state = checked in, cancelation = (0, <none>), mach = false, privileged = false, bssend = 0x0, recv = 0x1703, send = 0x2803, pid = 52675, euid = 501, egid = 20, asid = 100005, channel: <OS_dispatch_mach: vin.je.jevxpctrace-test-service.peer.0x11f704080[0x600001b3c120] = { xref = 1, ref = 4, target = com.apple.NSXPCConnection.user.anonymous.52675[0x600000738300], receive = 0x1703, send = 0x2803, send-possible = 0x0, checkin = 0x0, send state = 0000000000000000, disconnected = 0, canceled = 0 }> } <connection: 0x11f704080> { name = vin.je.jevxpctrace-test-service.peer.0x11f704080, listener = false, pid = 52675, euid = 501, egid = 20, asid = 100005 }>



(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = breakpoint 7.1
  * frame #0: 0x000000019848b85c libxpc.dylib`xpc_connection_send_message_with_reply
    frame #1: 0x0000000199693bdc Foundation`-[NSXPCConnection _sendInvocation:orArguments:count:methodSignature:selector:withProxy:] + 2480
    frame #2: 0x000000019969b090 Foundation`-[NSXPCConnection _sendSelector:withProxy:arg1:arg2:] + 144
    frame #3: 0x000000019969afa8 Foundation`_NSXPCDistantObjectSimpleMessageSend2 + 76
    frame #4: 0x0000000100f02e14 jevxpctrace-test-client`-[ViewController xpcTest](self=0x0000600002994480, _cmd="xpcTest") at ViewController.m:24:5
    frame #5: 0x0000000100f02f74 jevxpctrace-test-client`-[ViewController viewDidLoad](self=0x0000600002994480, _cmd="viewDidLoad") at ViewController.m:35:5
    frame #6: 0x000000019b3cb638 AppKit`-[NSViewController _sendViewDidLoad] + 100
    frame #7: 0x000000019b3b3198 AppKit`-[NSViewController _loadViewIfRequired] + 304
    frame #8: 0x000000019b3b3028 AppKit`-[NSViewController view] + 32
    frame #9: 0x000000019b590b58 AppKit`-[NSWindow _contentViewControllerChanged] + 128
    frame #10: 0x00000001996aafb0 Foundation`-[NSObject(NSKeyValueCoding) setValue:forKey:] + 360
    frame #11: 0x000000019b5cbe7c AppKit`-[NSWindow setValue:forKey:] + 168
    frame #12: 0x000000019b3f1ee8 AppKit`-[NSIBUserDefinedRuntimeAttributesConnector establishConnection] + 252
    frame #13: 0x000000019b3358a8 AppKit`-[NSIBObjectData nibInstantiateWithOwner:options:topLevelObjects:] + 944
    frame #14: 0x000000019b3b3ea4 AppKit`-[NSNib _instantiateNibWithExternalNameTable:options:] + 688
    frame #15: 0x000000019b3b3b18 AppKit`-[NSNib _instantiateWithOwner:options:topLevelObjects:] + 160
    frame #16: 0x000000019bb49ff0 AppKit`-[NSStoryboard _instantiateControllerWithIdentifier:creator:storyboardSegueTemplate:sender:] + 496
    frame #17: 0x000000019b31a970 AppKit`NSApplicationMain + 748
    frame #18: 0x0000000100f03020 jevxpctrace-test-client`main(argc=3, argv=0x000000016eefe210) at main.m:14:12
    frame #19: 0x00000001010c50f4 dyld`start + 520
